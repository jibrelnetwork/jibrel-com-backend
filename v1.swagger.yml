openapi: "3.0.2"
info:
  version: "0.1.0"
  title: Jibrel.com
  description: |
    # *Jibrel.com* - Backend API Service

    API provides endpoints for registration/authentification flow and KYC process.

    # Common information

    ## Requests and Responses
    Response body of any call is empty string or `application/json` objects look like:
    * Successful case
    ```
    {
      "data": {
        ...
       }
    }
    ```
    * Error case
    ```
    {
      "errors": {
        field: [
          {"message": "Error message", "code": "error_code"}
        ]
      }
    }
    ```


    ## Error handling

    There are three common HTTP status codes for describing incorrect user behaivour:
    * `400 Bad Request` - raised if some input data was sent to the server
    * `403 Forbidden` - raised if an endpoint protected with authentication but the user is not logged in
    * `409 Conflict` - raised if logged user is not permitted to do any action because of breaking verification flow

    ### Below described common error codes:
    **Validation**:
     # todo
    More detailed description of errors and additional codes provided in paths.


tags:
  - name: User Account
    description: User account related endpoints
  - name: KYC
    description: Know Your Customer endpoints
servers:
  - url: http://localhost:8000
    description: localhost
paths:
  /v1/auth/registration:
    post:
      security: []
      tags:
        - User Account
      operationId: registerUser
      summary: "User registration."
      description: Register new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Registration"
            examples:
              validRegistration:
                $ref: '#/components/examples/validRegistration'
              disagreeTermsRegistration:
                $ref: '#/components/examples/disagreeTermsRegistration'
              weakPasswordRegistration:
                $ref: '#/components/examples/weakPasswordRegistration'
      responses:
        "200":
          description: |
            ## Successful registration.
            User created and logged in system by cookie.
            Email sent with confirmation one-time link.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: sessionid=27w6easdfcvq1psccd54jelu3witsecr; Path=/; HttpOnly
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        "400":
          description: |
            ## Error occurred.
            ### Possible codes:
              * `Invalid`
              * `Required`
              * `TooLong`
              * `Unique`

            ### Additional error codes:
            * `WeakPassword` - password is too weak and can't be accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"

  /v1/auth/registration/email-verify:
    post:
      security: []
      operationId: verifyUserEmail
      summary: "Verify email address."
      tags:
        - User Account
      description: "Verify code sent via email"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailVerify"
      responses:
        "200":
          description: "Success"
        "400":
          description: |
            ## Error occurred.
            ### Possible codes:
            * `Required`
            * `Invalid`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
          headers:
            Set-Cookie:
              schema:
                $ref: '#/components/schemas/LoginCookies'
        "409":
          description: "Conflict. User has already verified email address."

  /v1/auth/registration/confirmation-email-resend:
    post:
      operationId: resendConfirmationEmail
      summary: "Resend confirmation email."
      tags:
        - User Account
      description: "Resend email with regenerated code"
      responses:
        "200":
          description: "Success"
        "409":
          description: "Conflict. User has already verified email address."

  /v1/auth/login:
    post:
      security: []
      operationId: login
      summary: "Login."
      tags:
        - User Account
      description: "Check the credentials and set session cookie"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Authentication'
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
          headers:
            Set-Cookie:
              schema:
                $ref: '#/components/schemas/LoginCookies'
        "400":
          description : |
            ## Error occured.
            ### Possible codes:
            * `Required`
            * `Invalid`
        "403":
          description: "Access Denied"

  /v1/auth/logout:
    post:
      operationId: logout
      summary: "Logout."
      tags:
        - User Account
      description: "Logs out user by removing session cookie from client"
      responses:
        "200":
          description: "Success"
          headers:
            Set-Cookie:
              schema:
                type: string
                example: sessionid=; Path=/; HttpOnly
        "403":
          description: "Access Denied"

  /v1/auth/password/change:
    post:
      operationId: changePassword
      summary: "Change the password"
      tags:
        - User Account
      description: "Change the password"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePassword"
      responses:
        "200":
          description: "Success"
        "400":
          description: |
            ## Error occured.
            ### Possible codes:
            * `Required`
            * `Invalid`

            ### Additional error codes:
            * `WeakPassword` - password is too weak and can't be accepted
            * `WrongPassword` - password doesn't match with the original password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
        "403":
          description: "Access Denied"
        "409":
          description: "Conflict. User isn't verified yet."

  /v1/auth/password/reset:
    post:
      security: []
      operationId: requestPasswordReset
      summary: "Request password resetting."
      tags:
        - User Account
      description: "Reset the password"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: '#/components/schemas/userEmail'
              required:
                - email
      responses:
        "200":
          description: "Success"

  /v1/auth/password/reset/activate:
    post:
      security: []
      operationId: activatePasswordReset
      summary: "Activate password resetting process."
      tags:
        - User Account
      description: "Activates password resetting routine"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  $ref: "#/components/schemas/PasswordResetKey"
              required:
                - key
      responses:
        "200":
          description: "Success"
        "400":
          description: |
            ## Error occured.
            ### Possible codes:
              * `Invalid`
              * `Required`


  /v1/auth/password/reset/complete:
    post:
      security: []
      operationId: resetPassword
      summary: "Reset the password."
      tags:
        - User Account
      description: "Reset the password"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  $ref: "#/components/schemas/PasswordResetKey"
                password:
                  $ref: '#/components/schemas/userPassword'
              required:
                - key
                - password
      responses:
        "200":
          description: "Success"
        "400":
          description: |
            ## Error occurred.
            ### Possible codes:
              * `Invalid`
              * `Required`
              * `TooLong`

            ### Additional error codes:
            * `WeakPassword` - password is too weak and can't be accepted

  /v1/user/profile:
    get:
      operationId: getProfile
      summary: "Retrieve profile info for current user."
      tags:
        - User Account
      description: "Returns profile info for current user"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        "403":
          description: "Access Denied"

  /v1/user/profile/language:
    post:
      operationId: setLanguage
      summary: "Set user language"
      tags:
        - User Account
      description: "Set main language for current user"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                language:
                  $ref: '#/components/schemas/Language'
              required:
                - language
      responses:
        "200":
          description: "Success"

  /v1/user/limits:
    get:
      operationId: getLimits
      summary: "Retrieve API limits for user"
      tags:
        - User Account
      description: "Returns API limits for current user"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  resend_verification_email:
                    allOf:
                      - $ref: '#/components/schemas/Limit'
                      - nullable: true
                  resend_verification_sms:
                    allOf:
                      - $ref: '#/components/schemas/Limit'
                      - nullable: true
                  resend_verification_call:
                    allOf:
                      - $ref: '#/components/schemas/Limit'
                      - nullable: true
                  upload_kyc_document:
                    allOf:
                      - $ref: '#/components/schemas/Limit'
                      - nullable: true

  /v1/kyc/document:
    post:
      operationId: uploadDocument
      summary: Uploads a file.
      tags:
        - KYC
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DocumentUpload'
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentUUID"
        "400":
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
        "403":
          description: "Access Denied"
        "409":
          description: "Conflict"

  /v1/kyc/phone:
    get:
      operationId: retrievePhone
      summary: Retrieves masked phone number and its status
      tags:
        - KYC
      description: "Retrieve phone number"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Phone'

    post:
      operationId: submitPhone
      summary: Submit phone number.
      tags:
        - KYC
      description: "Submit phone number"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmitPhone"
      responses:
        "201":
          description: "Success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Phone'
        "400":
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
        "403":
          description: "Access Denied"
        "409":
          description: "Conflict. User has already verified phone number."
        "429":
          description: "Too Many Requests"

    put:
      operationId: changePhone
      summary: Change phone number.
      tags:
        - KYC
      description: "Change phone number"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmitPhone"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Phone'
        "400":
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"

  /v1/kyc/phone/resend-sms:
    post:
      operationId: resendPhoneVerificationSms
      summary: Re-send SMS with a PIN.
      tags:
        - KYC
      description: "Re-send SMS with a PIN"
      responses:
        "200":
          description: "Success"
        "403":
          description: "Access Denied"
        "409":
          description: "Conflict. User has already verified phone number or has no phone at all."
        "429":
          description: "Too Many Requests"

  /v1/kyc/phone/call-me:
    post:
      operationId: callPhoneVerification
      summary: Call me to verify number.
      tags:
        - KYC
      description: "Call me to verify number"
      responses:
        "200":
          description: "Success"
        "403":
          description: "Access Denied"
        "409":
          description: "Conflict. User has already verified phone number or has no phone at all."
        "429":
          description: "Too Many Requests"

  /v1/kyc/phone/verify:
    post:
      operationId: verifyPhoneNumber
      summary: Verify phone number.
      tags:
        - KYC
      description: "Verify phone number"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyPhoneNumber"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
        "400":
          description: |
            ## Error occured.
            ### Possible codes:
            * `Required`
            * `Invalid`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
        "403":
          description: "Access Denied"
        "409":
          description: "Conflict. User has already verified phone number or has no phone at all."
        "429":
          description: "Too Many Requests"

  /v1/kyc/individual:
    post:
      operationId: submitKYCIndividual
      summary: Submit Personal KYC data.
      tags:
        - KYC
      description: "Submit Personal KYC data"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KycIndividual"
      responses:
        "200":
          description: "Success"
        "400":
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
        "403":
          description: "Access Denied"
        "409":
          description: "Conflict"

  /v1/kyc/individual/validate:
    post:
      operationId: validateKYCIndividual
      summary: Validate Personal KYC data.
      tags:
        - KYC
      description: |
        Validate data before commit.
        Only the passed keys will be validated.
        It means that data with missing values should be
        passed anyway with empty value
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/KycIndividualStep0"
                - $ref: "#/components/schemas/KycIndividualStep1"
                - $ref: "#/components/schemas/KycIndividualStep2"
      responses:
        "200":
          description: "Success"
        "400":
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
        "403":
          description: "Access Denied"

  /v1/kyc/organization:
    post:
      operationId: submitKYCOrganization
      summary: Submit Organization KYC data.
      tags:
        - KYC
      description: "Submit Organization KYC data"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KycOrganization"
      responses:
        "200":
          description: "Success"
        "400":
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
        "403":
          description: "Access Denied"
        "409":
          description: "Conflict"

  /v1/kyc/organization/validate:
    post:
      operationId: validateKYCOrganization
      summary: Validate Organization KYC data.
      tags:
        - KYC
      description: |
        Validate data before commit.
        Only the passed keys will be validated.
        It means that data with missing values should be
        passed anyway with empty value
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/KycOrganizationStep0"
                - $ref: "#/components/schemas/KycOrganizationStep1"
                - $ref: "#/components/schemas/KycOrganizationStep2"
                - $ref: "#/components/schemas/KycOrganizationStep3"
                - $ref: "#/components/schemas/KycOrganizationStep4"
      responses:
        "200":
          description: "Success"
        "400":
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
        "403":
          description: "Access Denied"

  /v1/kyc/approved:
    get:
      operationId: retrievePersonalInfo
      summary: Retrieve approved personal information about user
      tags:
        - KYC
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/KycIndividualApproved"
                  - $ref: "#/components/schemas/KycOrganizationApproved"
        "403":
          description: "Access Denied"
        "409":
          description: "Conflict. Account must be verified first"

  /v1/payments/assets:
    get:
      security: []
      operationId: userAssets
      summary: available assets
      tags:
        - Assets
      responses:
        "200":
          description: |
            List of available assets.
            Return all available assets by default. Use `country` query parameter to show only assets available
            in specific country.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Asset"
              example:
                - id: "2a274790-0df5-4bfc-9caa-9ad77ff96472"
                  name: "United Arab Emirates dirham"
                  symbol: "AED"
                  type: "fiat"
                  decimalPlaces: 2
                - id: "29052e44-d6d1-40a9-b66a-6d4746563e1d"
                  name: "Bitcoin"
                  symbol: "BTC"
                  type: "crypto"
                  decimalPlaces: 6
                - id: "548eb420-eeaa-40a0-a60d-cc6c6bdea70a"
                  name: "Ethereum"
                  symbol: "ETH"
                  type: "crypto"
                  decimalPlaces: 6
                - id: "e1c9e112-4651-4fab-86d5-f96e53c594d4"
                  name: "Ripple"
                  symbol: "XRP"
                  type: "crypto"
                  decimalPlaces: 6
                - id: "43674d67-36c7-4728-8b23-ec5004d0151e"
                  name: "Litecoin"
                  symbol: "LTC"
                  type: "crypto"
                  decimalPlaces: 6
                - id: "7375ea34-2e96-4a65-a44c-1b9a43cdade7"
                  name: "Bitcoin Cash"
                  symbol: "BCH"
                  type: "crypto"
                  decimalPlaces: 6
        "403":
          description: "Access Denied"
        "409":
          description: "Conflict. Account must be verified first"

  /v1/payments/operations:
    get:
      operationId: operationsList
      summary: history of the user deposit, withdrawal and exchange operations
      tags:
        - Operations
      parameters:
        - $ref: "#/components/parameters/cursor"
        - name: type
          in: query
          description: filter operations by type (`withdrawal`, `deposit`, `sell`, `buy`).
          schema:
            type: string
      responses:
        "400":
          description: |
            Invalid request.
            Possible errors:
            * Invalid cursor provided
            * Invalid `type` filter value
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - next
                  - previous
                properties:
                  data:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/DepositOperation'
                  next:
                    type: string
                    nullable: true
                  previous:
                    type: string
                    nullable: true
              example:
                data:
                  - id: "ee247fb6-91bd-4558-bb53-0474cfa584a1"
                    createdAt: "2019-07-29T18:10:22.166484"
                    updatedAt: "2019-07-29T20:01:25.926621"
                    type: "deposit"
                    creditAmount: "146428.00"
                    creditAssetId: "2a274790-0df5-4bfc-9caa-9ad77ff96472"
                    creditAsset: "USD"
                    feeAmount: "0"
                    feeAssetId: "2a274790-0df5-4bfc-9caa-9ad77ff96472"
                    feeAsset: "USD"
                    status: "completed"
                next: "ASDDVd1=="
                previous: "BSDDVd1=="

  /v1/payments/operations/{operationId}:
    get:
      operationId: paymentsOperationDetails
      summary: Payments operation details
      tags:
        - Operations
      parameters:
        - name: operationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "400":
          description: "Invalid operation id format"
        "403":
          description: "Access Denied"
        "404":
          description: "Operation not found"
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    oneOf:
                      - $ref: '#/components/schemas/DepositOperation'
              examples:
                Deposit:
                  description: Deposit operation
                  value:
                    id: "7f995e86-81da-4769-b7ea-2c61e5cb8b0f"
                    createdAt: "2019-09-30T19:15:54.656041Z"
                    updatedAt: "2019-09-30T19:15:54.678083Z"
                    type: "deposit"
                    debitAmount: "1000.000000"
                    debitAsset: "USD"
                    debitAssetId: "3f99d5b1-f411-473f-8e0c-519327a748dc"
                    feeAmount: "0"
                    feeAsset: null
                    feeAssetId: null
                    status: "waiting_payment"
                    confirmationDocument: null
                    coldBankAccount: "228"
                    depositReferenceCode: "DEPOSIT-530-330-427"
                    cryptoDepositAddress: null
                    userIban: "7519"

  /v1/payments/operations/{operationId}/upload:
    post:
      operationId: uploadOperationConfirmation
      summary: upload operation confirmation document
      tags:
        - Operations
      parameters:
        - name: operationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
      description: |
        Upload deposit confirmation document if applyable for specific deposit method
        (only wire transfer deposit supported).
      responses:
        "201":
          description: "Document uploaded"
        "400":
          description: "Invalid document format"
        "403":
          description: "Access Denied"
        "404":
          description: "Operation not found"
        "406":
          description: "Uploads not acceptable for this operation type"

  /v1/payments/bank-account:
    get:
      operationId: bankAccountList
      summary: get list of bank accounts available for wire transfers
      tags:
        - Payments
      responses:
        "200":
          description: "List of user bank accounts for deposit or withdrawal operations"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BankAccount'
              example:
                - id: "d3e13009-e12e-495a-96ee-dfd3df81d866"
                  swiftCode: "ADCBAEAATRY"
                  bankName: "ABU DHABI COMMERCIAL BANK"
                  holderName: "Mehdi Dehbi"
                  ibanLastNumbers: "3122"
        "403":
          description: "Access Denied"
    post:
      operationId: addBankAccount
      summary: add international bank account to user jibrel.com account
      tags:
        - Payments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBankAccount'
            example:
              swiftCode: "ADCBAEAATRY"
              bankName: "ABU DHABI COMMERCIAL BANK"
              holderName: "Mehdi Dehbi"
              ibanNumber: "SA0380000000608010167519"
      responses:
        "201":
          description: "Bank account added to user account"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullBankAccount'
              example:
                id: "d3e13009-e12e-495a-96ee-dfd3df81d866"
                swiftCode: "ADCBAEAATRY"
                bankName: "ABU DHABI COMMERCIAL BANK"
                holderName: "Mehdi Dehbi"
                ibanNumber: "SA0380000000608010167519"
        "400":
          description: "Invalid input"
        "403":
          description: "Access Denied"

  /v1/payments/bank-account/{bankAccountId}:
    delete:
      operationId: deleteBankAccount
      summary: delete bank account from user account
      tags:
        - Payments
      parameters:
        - name: bankAccountId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: "Bank account was deleted"
        "403":
          description: "Access Denied"
        "404":
          description: "Not found"

  /v1/payments/bank-account/{bankAccountId}/deposit:
    post:
      operationId: createBankAccountDepositRequest
      summary: create bank account deposit request
      tags:
        - Payments
      parameters:
        - name: bankAccountId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      description: |
        Create deposit request.

        `operationId` can be used to fetch deposit operation status.
      requestBody:
        content:
          application/json:
            example:
              amount: "1000.00"
            schema:
              type: object
              required:
                - amount
              properties:
                amount:
                  allOf:
                    - $ref: '#/components/schemas/fiatDecimal'
      responses:
        "201":
          description: |
            Deposit request created. `operationId` can be used to retrieve deposit operation status
            from operations endpoint.
          content:
            application/json:
              schema:
                type: object
                required:
                  - uuid
                  - amount
                  - coldBankAccount
                  - depositReferenceCode
                properties:
                  uuid:
                    type: string
                    format: uuid
                  amount:
                    $ref: '#/components/schemas/varyDecimal'
                  coldBankAccount:
                    $ref: '#/components/schemas/ColdBankAccount'
                  depositReferenceCode:
                    type: string
              example:
                uuid: "4c6cd399-770c-4ab0-aa46-e5e89f10562a"
                amount: "1000.00"
                depositBankAccount:
                  uuid: "7798602e-d537-4434-a460-82c84f919fe7"
                  bankAccountDetails: "gib money plox"
                depositReferenceCode: "DEPOSIT-82345612"
        "409":
          description: "Conflicting operation."
        "400":
          description: |
            Invalid request.

            Possible errors:

            * invalid payment method or id
            * invalid deposit amount
        "403":
          description: "Unauthorized"

  /v1/payments/balance:
    get:
      operationId: getAvailableBalance
      summary: Get available USD balance for current user
      tags:
        - Payments
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      balance:
                        type: string
                        pattern: '^\d{1,}\.\d{2}$'
              example:
                data:
                  balance: "1000.00"

  /v1/investment/offerings/{offeringId}/application:
    post:
      operationId: createInvestmentApplication
      summary: Creates application to invest in offering
      tags:
        - Investment
      parameters:
        - name: offeringId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "201":
          description: "Created"

  /v1/campaigns/company/{companySlug}/offerings:
    get:
      security:
        - bearerAuthentication: []
      operationId: getOfferingsForCompany
      summary: Returns list of offerings related to company
      tags:
        - Campaigns
      parameters:
        - name: companySlug
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Offering'
        "403":
          description: "Authentication failed"

  /cms/company/{companySlug}/offerings:
    get:
      security:
        - bearerAuthentication: []
      operationId: getOfferingsForCompany
      summary: Returns list of offerings related to company
      tags:
        - CMS integration
      parameters:
        - name: companySlug
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Offering'
        "403":
          description: "Authentication failed"

components:
  securitySchemes:
    cookieAuthentication:
      type: apiKey
      in: cookie
      name: sessionid
    CSRFProtection:
      type: apiKey
      in: header
      name: X-CSRFToken
    bearerAuthentication:
      type: apiKey
      scheme: bearer

  parameters:
    cursor:
      name: cursor
      in: query
      description: pagination cursor from previous page
      schema:
        type: string
  schemas:
    varyDecimal:
      type: string
      pattern: '^\d{1,}\.\d{1,6}$'
    fiatDecimal:
      type: string
      pattern: '^\d{1,}\.\d{1,2}$'
    userEmail:
      type: string
      description: "Email address. Should be unique."
      maxLength: 320
      format: email
    userPassword:
      type: string
      description: "Password"
      maxLength: 100
      format: password
    firstName:
      type: string
      description: "First Name"
      maxLength: 30
    lastName:
      type: string
      description: "Last Name"
      maxLength: 150
    userName:
      type: string
      description: "Non Unique username (Legacy)"
      maxLength: 128
    TermsAndPolicy:
      type: object
      required:
        - isAgreedDocuments
      properties:
        isAgreedDocuments:
          type: boolean
          description: "Agreement with Jibrel's Terms and Conditions"
    PhoneNumber:
      description: "E.164 formatted phone number"
      type: string
      pattern: '^\+[1-9]\d{1,14}$'

    LoginCookies:
      type: string
      example: sessionid=27w6easdfcvq1psccd54jelu3witsecr; Path=/; HttpOnly

    Country:
      type: string
      maxLength: 2
      minLength: 2
      pattern: "^[a-z]{2}$"
      example: "ae"
    Language:
      type: string
      maxLength: 2
      minLength: 2
      pattern: "^[a-z]{2}$"
      example: "en"

    Asset:
      type: object
      required:
        - id
        - name
        - symbol
        - type
        - decimalPlaces
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        symbol:
          type: string
        type:
          type: string
        decimalPlaces:
          type: integer

    OperationCommon:
      type: object
      required:
        - id
        - createdAt
        - updatedAt
        - type
        - status
        - feeAmount
        - feeAsset
        - feeAssetId
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: 'date-time'
        updatedAt:
          type: string
          format: 'date-time'
        type:
          type: string
          enum: ['deposit']
        status:
          type: string
          enum:
            - 'unconfirmed'
            - 'waiting_payment'
            - 'pending'
            - 'processing'
            - 'completed'
            - 'canceled'
            - 'expired'
            - 'failed'
        feeAmount:
          $ref: "#/components/schemas/varyDecimal"
        feeAsset:
          type: string
          nullable: true
        feeAssetId:
          type: string
          format: uuid
          nullable: true

    DepositOperation:
      allOf:
        - $ref: '#/components/schemas/OperationCommon'
        - type: object
          required:
            - debitAmount
            - debitAsset
            - debitAssetId
            - confirmationDocument
            - depositBankAccount
            - depositReferenceCode
            - cryptoDepositAddress
            - userIban
          properties:
            debitAmount:
              $ref: "#/components/schemas/varyDecimal"
            debitAsset:
              type: string
            debitAssetId:
              type: string
              format: uuid
            confirmationDocument:
              type: string
              nullable: true
            depositBankAccount:
              type: string
              nullable: true
            depositReferenceCode:
              type: string
              nullable: true
            cryptoDepositAddress:
              type: string
              nullable: true
            userIban:
              type: string
              nullable: true
            totalPrice:
              nullable: true
              anyOf:
                - nullable: true
                - $ref: "#/components/schemas/varyDecimal"

    ColdBankAccount:
      type: object
      required:
        - uuid
        - holderName
        - ibanNumber
        - accountNumber
        - bankName
        - swiftCode
      properties:
        uuid:
          type: string
          format: uuid
        holderName:
          type: string
        ibanNumber:
          type: string
        accountNumber:
          type: string
        bankName:
          type: string
        swiftCode:
          type: string

    BaseBankAccount:
      type: object
      required:
        - swiftCode
        - bankName
        - holderName
      properties:
        swiftCode:
          type: string
        bankName:
          type: string
          minLength: 3
          maxLength: 64
        holderName:
          type: string

    CreateBankAccount:
      allOf:
        - $ref: '#/components/schemas/BaseBankAccount'
        - type: object
          required:
            - ibanNumber
          properties:
            ibanNumber:
              type: string

    BankAccount:
      allOf:
        - $ref: '#/components/schemas/BaseBankAccount'
        - type: object
          required:
            - id
            - ibanLastNumbers
          properties:
            id:
              type: string
              format: uuid
            ibanLastNumbers:
              type: string

    FullBankAccount:
      allOf:
        - $ref: '#/components/schemas/CreateBankAccount'
        - type: object
          required:
            - id
            - ibanNumber
          properties:
            id:
              type: string
              format: uuid
            ibanNumber:
              type: string

    Registration:
      allOf:
        - type: object
          required:
            - email
            - password
            - firstName
            - lastName
          properties:
            email:
              $ref: '#/components/schemas/userEmail'
            password:
              $ref: '#/components/schemas/userPassword'
            firstName:
              $ref: '#/components/schemas/firstName'
            lastName:
              $ref: '#/components/schemas/lastName'
            language:
              $ref: '#/components/schemas/Language'
        - $ref: '#/components/schemas/TermsAndPolicy'

    Profile:
      type: object
      properties:
        data:
          allOf:
            - type: object
              required:
                - uuid
                - userEmail
                - isEmailConfirmed
              properties:
                uuid:
                  type: string
                  description: "User UUID"
                  format: uuid
                userEmail:
                  $ref: '#/components/schemas/userEmail'
                firstName:
                  $ref: '#/components/schemas/firstName'
                lastName:
                  $ref: '#/components/schemas/lastName'
                userName:
                  $ref: '#/components/schemas/userName'
                isEmailConfirmed:
                  type: boolean
                userPhone:
                  type: string
                  maxLength: 4
                  nullable: true
                isPhoneConfirmed:
                  type: boolean
                language:
                  $ref: '#/components/schemas/Language'
            - $ref: '#/components/schemas/TermsAndPolicy'
            - type: object
              properties:
                kycStatus:
                  type: string
                  enum: [unverified, verified, advanced]
                  description: >
                    KYC statuses:
                     * `unverified` - Newly created account
                     * `verified` - Basic level
                     * `advanced` - Advanced level
              required:
                - kycStatus

    EmailVerify:
      type: object
      properties:
        key:
          type: string
          format: uuid
      required:
        - key

    PasswordResetKey:
      type: string
      format: uuid

    Authentication:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/userEmail'
        password:
          $ref: '#/components/schemas/userPassword'
      required:
        - email
        - password

    ChangePassword:
      type: object
      properties:
        oldPassword:
          $ref: '#/components/schemas/userPassword'
        newPassword:
          $ref: '#/components/schemas/userPassword'
      required:
        - oldPassword
        - newPassword

    Error:
      type: object
      properties:
        code:
          type: string
          example: "max_length"
        message:
          type: string
          example: "Ensure this field has no more than 100 characters."

    Errors:
      type: object
      properties:
        errors:
          type: object
          description: "Errors"
          additionalProperties: true

    KYCString:
      type: string
      maxLength: 30
      minLength: 1
      pattern: '([^\W\d]|[\s-])+'

    KycIndividual:
      type: object
      required:
        - firstName
        - lastName
        - birthDate
        - nationality
        - streetAddress
        - city
        - country
        - passportNumber
        - passportExpirationDate
        - passportDocument
        - proofOfAddressDocument
        - isAgreedRisks
      properties:
        # Personal and Contact Information
        firstName:
          allOf:
            - description: "First Name"
            - $ref: '#/components/schemas/KYCString'
          example: "John"
        middleName:
          allOf:
            - description: "Middle Name"
            - $ref: '#/components/schemas/KYCString'
          example: "Jr"
        lastName:
          allOf:
            - description: "Last Name"
            - $ref: '#/components/schemas/KYCString'
          example: "Doe"
        alias:
          allOf:
            - description: "Alias"
            - $ref: '#/components/schemas/KYCString'
          example: "Ivan"
        birthDate:
          description: "Date of Birth"
          type: string
          format: date
          example: "1990-01-29"
        nationality:
          allOf:
            - description: "Nationality"
            - $ref: '#/components/schemas/Country'
          example: "ru"
        # Current Residential Address
        streetAddress:
          description: "Street Address"
          type: string
          example: "Pushkina street, 1"
        apartment:
          description: "Apartment, Unit or Suite"
          type: string
          example: "43"
        city:
          description: "City"
          type: string
          example: "London"
        postCode:
          description: "Post Code"
          type: string
          example: "400033"
        country:
          allOf:
            - description: "Country"
            - $ref: '#/components/schemas/Country'
          example: "gb"
        # Income Information
        occupation:
          description: "Profession/Occupation"
          type: string
          example: "design"
        incomeSource:
          description: "Primary Source of Income"
          type: string
          example: "inheritance"
        # Upload Documentation
        passportNumber:
          description: "Passport number"
          type: string
          example: "1214 896521"
        passportExpirationDate:
          description: "Passport exiration date"
          type: string
          format: date
          example: "2021-12-16"
        passportDocument:
          description: "Passport"
          type: string
          format: uuid
          example: "6a0413da-4f62-48fa-87e7-e3727a82c9c3"
        proofOfAddressDocument:
          description: "Proof of Address (Utility Bill, Bank  Statements,)"
          type: string
          format: uuid
          example: "5ec7deda-5c3f-4a1f-8d1e-9a552538f01b"
        isAgreedRisks:
          type: boolean
          example: true

    KycIndividualStep0:
      type: object
      required:
        - step
        - firstName
        - lastName
        - birthDate
        - nationality
        - passportNumber
        - passportExpirationDate
        - passportDocument
      properties:
        step:
          description: "Current step"
          type: integer
          enum:
           - 0
        firstName:
          $ref: '#/components/schemas/KycIndividual/properties/firstName'
        lastName:
          $ref: '#/components/schemas/KycIndividual/properties/lastName'
        middleName:
          $ref: '#/components/schemas/KycIndividual/properties/middleName'
        alias:
          $ref: '#/components/schemas/KycIndividual/properties/alias'
        birthDate:
          $ref: '#/components/schemas/KycIndividual/properties/birthDate'
        nationality:
          $ref: '#/components/schemas/KycIndividual/properties/nationality'
        passportNumber:
          $ref: '#/components/schemas/KycIndividual/properties/passportNumber'
        passportExpirationDate:
          $ref: '#/components/schemas/KycIndividual/properties/passportExpirationDate'
        passportDocument:
          $ref: '#/components/schemas/KycIndividual/properties/passportDocument'

    KycIndividualStep1:
      type: object
      required:
        - step
        - streetAddress
        - city
        - country
        - proofOfAddressDocument
      properties:
        step:
          description: "Current step"
          type: integer
          enum:
           - 1
        streetAddress:
          $ref: '#/components/schemas/KycIndividual/properties/streetAddress'
        apartment:
          $ref: '#/components/schemas/KycIndividual/properties/apartment'
        city:
          $ref: '#/components/schemas/KycIndividual/properties/city'
        postCode:
          $ref: '#/components/schemas/KycIndividual/properties/postCode'
        country:
          $ref: '#/components/schemas/KycIndividual/properties/country'
        proofOfAddressDocument:
          $ref: '#/components/schemas/KycIndividual/properties/proofOfAddressDocument'

    KycIndividualStep2:
      type: object
      required:
        - step
        - occupation
        - incomeSource
        - isAgreedRisks
      properties:
        step:
          description: "Current step"
          type: integer
          enum:
           - 2
        occupation:
          $ref: '#/components/schemas/KycIndividual/properties/occupation'
        incomeSource:
          $ref: '#/components/schemas/KycIndividual/properties/incomeSource'
        isAgreedRisks:
          type: boolean
          example: true

    CompanyAddressInfo:
      type: object
      required:
        - streetAddress
        - city
        - country
      properties:
        streetAddress:
          description: "Street Address : Free Text"
          type: string
        apartment:
          description: "Apartment, Unit or Suite (Optional) : Free text"
          type: string
        city:
          description: "City : Free Text"
          type: string
        postCode:
          description: "Post Code (Optional): Free text"
          type: string
        country:
          allOf:
            - description: "Country : Dropdown"
            - $ref: '#/components/schemas/Country'

    Beneficiary:
      type: object
      required:
        - fullName
        - birthDate
        - nationality
        - email
        - phoneNumber
        - streetAddress
        - city
        - country
        - passportNumber
        - passportExpirationDate
        - passportDocument
        - proofOfAddressDocument
      properties:
        fullName:
          description: "Full Name : Free Text"
          type: string
          maxLength: 320
          minLength: 1
        birthDate:
          description: "Date of Birth : Birthday"
          type: string
          format: date
        nationality:
          description: "Nationality : Dropdown"
          $ref: '#/components/schemas/Country'
        email:
          description: "Email : Valid Email "
          type: string
          format: email
        phoneNumber:
          description: "Primary phone number"
          $ref: '#/components/schemas/Phone'
        streetAddress:
          description: "Street Address : Free Text"
          type: string
        apartment:
          description: "Apartment, Unit or Suite (Optional) : Free text"
          type: string
        city:
          description: "City : Free Text"
          type: string
        postCode:
          description: "Post Code (Optional): Free text"
          type: string
        country:
          description: "Country : Dropdown"
          $ref: '#/components/schemas/Country'
        passportNumber:
          description: "Passport Number"
          type: string
        passportExpirationDate:
          description: "Passport Expiration Date"
          type: string
          format: date
        passportDocument:
          description: "Passport"
          type: string
          format: uuid
        proofOfAddressDocument:
          description: "Proof of Address (Utility Bill, Bank  Statements,)"
          type: string
          format: uuid

    KycOrganization:
      type: object
      required:
        - firstName
        - lastName
        - birthDate
        - nationality
        - phoneNumber
        - email
        - streetAddress
        - city
        - country
        - passportNumber
        - passportExpirationDate
        - passportDocument
        - proofOfAddressDocument
        - companyName
        - tradingName
        - placeOfIncorporation
        - dateOfIncorporation
        - commercialRegister
        - shareholderRegister
        - articlesOfIncorporation
        - companyAddressRegistered
        - beneficiaries
        - directors
        - isAgreedRisks
      properties:
        firstName:
          description: "First Name : Free Text"
          type: string
          maxLength: 320
          minLength: 1
        middleName:
          description: "Middle Name (Optional) : Free Text"
          type: string
          maxLength: 320
          minLength: 1
        lastName:
          description: "Last Name : Free Text"
          type: string
          maxLength: 320
          minLength: 1
        birthDate:
          description: "Date of Birth : Birthday"
          type: string
          format: date
        nationality:
          allOf:
            - description: "Nationality : Dropdown"
            - $ref: '#/components/schemas/Country'
        email:
          description: "Email : Valid Email "
          type: string
          format: email
        # Current Residential Address
        streetAddress:
          description: "Street Address : Free Text"
          type: string
        apartment:
          description: "Apartment, Unit or Suite (Optional) : Free text"
          type: string
        city:
          description: "City : Free Text"
          type: string
        postCode:
          description: "Post Code (Optional): Free text"
          type: string
        country:
          allOf:
            - description: "Country : Dropdown"
            - $ref: '#/components/schemas/Country'
        phoneNumber:
          allOf:
            - description: "Primary phone number"
            - $ref: '#/components/schemas/PhoneNumber'
        passportNumber:
          description: "Passport Number"
          type: string
        passportExpirationDate:
          description: "Passport Expiration Date"
          type: string
          format: date
        passportDocument:
          description: "Passport"
          type: string
          format: uuid
        proofOfAddressDocument:
          description: "Proof of Address (Utility Bill, Bank  Statements,)"
          type: string
          format: uuid
        companyName:
          description: "Company Name: Free Text"
          type: string
          maxLength: 200
          minLength: 1
        tradingName:
          description: "Trading Name: Free Text"
          type: string
          maxLength: 200
          minLength: 1
        dateOfIncorporation:
          description: "Date of Incorporation: Date"
          type: string
          format: date
        placeOfIncorporation:
          description: "Place of Incorporation: Free Text"
          type: string
        commercialRegister:
          description: "Commercial Register Document ID"
          type: string
          format: uuid
        shareholderRegister:
          description: "Shareholder Register Document ID"
          type: string
          format: uuid
        articlesOfIncorporation:
          description: "Articles Of Incorporation Document ID"
          type: string
          format: uuid
        companyAddressRegistered:
          $ref: '#/components/schemas/CompanyAddressInfo'
        companyAddressPrincipal:
          $ref: '#/components/schemas/CompanyAddressInfo'
        beneficiaries:
          type: array
          items:
            $ref: '#/components/schemas/Beneficiary'
        directors:
          type: array
          items:
            type: string
        isAgreedRisks:
          type: boolean
          example: true


    KycOrganizationStep0:
      type: object
      required:
        - step
        - companyName
        - tradingName
        - commercialRegister
        - shareholderRegister
        - articlesOfIncorporation
      properties:
        step:
          description: "Current step"
          type: integer
          enum:
           - 0
        companyName:
          $ref: '#/components/schemas/KycOrganization/properties/companyName'
        tradingName:
          $ref: '#/components/schemas/KycOrganization/properties/tradingName'
        dateOfIncorporation:
          $ref: '#/components/schemas/KycOrganization/properties/dateOfIncorporation'
        placeOfIncorporation:
          $ref: '#/components/schemas/KycOrganization/properties/placeOfIncorporation'
        commercialRegister:
          $ref: '#/components/schemas/KycOrganization/properties/commercialRegister'
        shareholderRegister:
          $ref: '#/components/schemas/KycOrganization/properties/shareholderRegister'
        articlesOfIncorporation:
          $ref: '#/components/schemas/KycOrganization/properties/articlesOfIncorporation'

    KycOrganizationStep1:
      type: object
      required:
        - step
        - companyAddressRegistered
      properties:
        step:
          description: "Current step"
          type: integer
          enum:
           - 1
        companyAddressRegistered:
          $ref: '#/components/schemas/KycOrganization/properties/companyAddressRegistered'
        companyAddressPrincipal:
          $ref: '#/components/schemas/KycOrganization/properties/companyAddressPrincipal'

    KycOrganizationStep2:
      type: object
      required:
        - step
        - firstName
        - lastName
        - birthDate
        - nationality
        - phoneNumber
        - email
        - streetAddress
        - city
        - country
        - passportNumber
        - passportExpirationDate
        - passportDocument
        - proofOfAddressDocument
      properties:
        step:
          description: "Current step"
          type: integer
          enum:
           - 2
        firstName:
          $ref: '#/components/schemas/KycOrganization/properties/firstName'
        lastName:
          $ref: '#/components/schemas/KycOrganization/properties/lastName'
        middleName:
          $ref: '#/components/schemas/KycOrganization/properties/middleName'
        birthDate:
          $ref: '#/components/schemas/KycOrganization/properties/birthDate'
        nationality:
          $ref: '#/components/schemas/KycOrganization/properties/nationality'
        phoneNumber:
          $ref: '#/components/schemas/KycOrganization/properties/phoneNumber'
        email:
          $ref: '#/components/schemas/KycOrganization/properties/email'
        streetAddress:
          $ref: '#/components/schemas/KycOrganization/properties/streetAddress'
        apartment:
          $ref: '#/components/schemas/KycOrganization/properties/apartment'
        city:
          $ref: '#/components/schemas/KycOrganization/properties/city'
        postCode:
          $ref: '#/components/schemas/KycOrganization/properties/postCode'
        country:
          $ref: '#/components/schemas/KycOrganization/properties/country'
        passportNumber:
          $ref: '#/components/schemas/KycOrganization/properties/passportNumber'
        passportExpirationDate:
          $ref: '#/components/schemas/KycOrganization/properties/passportExpirationDate'
        passportDocument:
          $ref: '#/components/schemas/KycOrganization/properties/passportDocument'
        proofOfAddressDocument:
          $ref: '#/components/schemas/KycOrganization/properties/proofOfAddressDocument'

    KycOrganizationStep3:
      type: object
      required:
        - step
        - beneficiaries
      properties:
        step:
          description: "Current step"
          type: integer
          enum:
           - 3
        beneficiaries:
          $ref: '#/components/schemas/KycOrganization/properties/beneficiaries'

    KycOrganizationStep4:
      type: object
      required:
        - step
        - directors
        - isAgreedRisks
      properties:
        step:
          description: "Current step"
          type: integer
          enum:
           - 4
        directors:
          $ref: '#/components/schemas/KycOrganization/properties/directors'
        isAgreedRisks:
          type: boolean
          example: true

    KycIndividualApproved:
      type: object
      required:
        - accountType
        - firstName
        - lastName
        - streetAddress
        - city
        - country
      properties:
        accountType:
          description: "Account type"
          type: string
          enum:
            - individual
        firstName:
          allOf:
            - description: "First Name"
            - $ref: '#/components/schemas/KYCString'
          example: "John"
        middleName:
          allOf:
            - description: "Middle Name"
            - $ref: '#/components/schemas/KYCString'
          example: "Jr"
        lastName:
          allOf:
            - description: "Last Name"
            - $ref: '#/components/schemas/KYCString'
          example: "Doe"
        streetAddress:
          description: "Street Address"
          type: string
          example: "Pushkina street, 1"
        apartment:
          description: "Apartment, Unit or Suite"
          type: string
          example: "43"
        city:
          description: "City"
          type: string
          example: "London"
        postCode:
          description: "Post Code"
          type: string
          example: "400033"
        country:
          allOf:
            - description: "Country"
            - $ref: '#/components/schemas/Country'
          example: "gb"

    KycOrganizationApproved:
      type: object
      required:
        - accountType
        - companyName
        - companyAddressRegistered
      properties:
        accountType:
          description: "Account type"
          type: string
          enum:
            - individual
        companyName:
          $ref: '#/components/schemas/KycOrganization/properties/companyName'
        companyAddressRegistered:
          $ref: '#/components/schemas/KycOrganization/properties/companyAddressRegistered'

    DocumentUpload:
      type: object
      properties:
        file:
          type: string
          format: binary
      required:
        - file

    DocumentUUID:
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              type: string
              description: "Document UUID"
              example: "353235bd-d43b-429f-84d5-64f6d3f4a7df"

    SubmitPhone:
      type: object
      properties:
        number:
          $ref: '#/components/schemas/PhoneNumber'
      required:
        - number

    Phone:
      type: object
      properties:
        number:
          type: string
          minLength: 4
          maxLength: 4
          nullable: true
          pattern: '\d+'
          example: "6578"
        status:
          type: string
          enum:
            - unconfirmed
            - code_requested
            - code_sent
            - code_submitted
            - code_incorrect
            - expired
            - max_attempts_reached
            - verified
      required:
        - number
        - status

    VerifyPhoneNumber:
      type: object
      properties:
        pin:
          type: string
          description: "PIN"
      required:
        - pin

    Limit:
      type: object
      properties:
        leftSeconds:
          type: integer
          description: "Seconds left to next request"
        temproraryUnavailable:
          type: boolean
          description: "Tells if some limits were broken and user has to wait for a long time to the next request"

    Company:
      type: object
      properties:
        name:
          type: string

    Security:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        type:
          type: string
          enum: [ common_shares, convertible_debt ]
        created_at:
          type: string
          format: 'date-time'
        updated_at:
          type: string
          format: 'date-time'
        company:
          $ref: '#/components/schemas/Company'

    Offering:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        security:
          $ref: '#/components/schemas/Security'
        limitMinAmount:
          $ref: '#/components/schemas/fiatDecimal'
        limitMaxAmount:
          anyOf:
            - $ref: '#/components/schemas/fiatDecimal'
            - nullable: true
          nullable: true
        dateStart:
          type: string
          format: 'date-time'
        dateEnd:
          type: string
          format: 'date-time'
        createdAt:
          type: string
          format: 'date-time'
        updatedAt:
          type: string
          format: 'date-time'
        valuation:
          $ref: '#/components/schemas/fiatDecimal'
        goal:
          $ref: '#/components/schemas/fiatDecimal'
        round:
          type: string
          enum: [ angel, seed, a, b, c, d ]
        shares:
          type: integer
          nullable: true
        price:
          anyOf:
            - $ref: '#/components/schemas/fiatDecimal'
            - nullable: true
          nullable: true
        status:
          type: string
          enum: [ pending, active, clearing, completed, canceled ]
        equity:
          $ref: '#/components/schemas/varyDecimal'

    InvestmentApplication:
      type: object
      properties:
        amount:
          type: integer
        isAgreedRisks:
          type: boolean
        isAgreedSubscription:
          type: boolean

  examples:
    validRegistration:
      summary: Valid registration
      value:
        email: user@email.com
        password: VeryStromgPassPhrase
        firstName: Name
        lastName: Surname
        language: "ar"
        isAgreedDocuments: true
    disagreeTermsRegistration:
      summary: Invalid registration (terms isn't agreed)
      value:
        email: user@email.com
        password: VeryStromgPassPhrase
        firstName: Name
        lastName: Surname
        language: "ar"
        isAgreedDocuments: false
    weakPasswordRegistration:
      summary: Invalid registration (weak password)
      value:
        email: user@email.com
        password: password
        firstName: Name
        lastName: Surname
        language: "ar"
        isAgreedDocuments: true

security:
  - cookieAuthentication: []
  - CSRFProtection: []
