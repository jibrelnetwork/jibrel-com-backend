openapi: "3.0.2"
info:
  version: "0.1.0"
  title: Jibrel.com
  description: |
    # *Jibrel.com* - Backend API Service

    API provides endpoints for registration/authentification flow and KYC process.

    # Common information

    ## Requests and Responses
    Response body of any call is empty string or `application/json` objects look like:
    * Successful case
    ```
    {
      "data": {
        ...
       }
    }
    ```
    * Error case
    ```
    {
      "errors": {
        field: [
          {"message": "Error message", "code": "error_code"}
        ]
      }
    }
    ```


    ## Error handling

    There are three common HTTP status codes for describing incorrect user behaivour:
    * `400 Bad Request` - raised if some input data was sent to the server
    * `403 Forbidden` - raised if an endpoint protected with authentication but the user is not logged in
    * `409 Conflict` - raised if logged user is not permitted to do any action because of breaking verification flow

    ### Below described common error codes:
    **Validation**:
     # todo
    More detailed description of errors and additional codes provided in paths.


tags:
  - name: User Account
    description: User account related endpoints
  - name: KYC
    description: Know Your Customer endpoints
servers:
  - url: http://localhost:8000
    description: localhost
paths:
  /v1/auth/registration:
    post:
      security: []
      tags:
        - User Account
      operationId: registerUser
      summary: "User registration."
      description: Register new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Registration"
            examples:
              validRegistration:
                $ref: '#/components/examples/validRegistration'
              disagreeTermsRegistration:
                $ref: '#/components/examples/disagreeTermsRegistration'
              weakPasswordRegistration:
                $ref: '#/components/examples/weakPasswordRegistration'
      responses:
        "200":
          description: |
            ## Successful registration.
            User created and logged in system by cookie.
            Email sent with confirmation one-time link.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: sessionid=27w6easdfcvq1psccd54jelu3witsecr; Path=/; HttpOnly
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        "400":
          description: |
            ## Error occurred.
            ### Possible codes:
              * `Invalid`
              * `Required`
              * `TooLong`
              * `Unique`

            ### Additional error codes:
            * `WeakPassword` - password is too weak and can't be accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"

  /v1/auth/registration/email-verify:
    post:
      security: []
      operationId: verifyUserEmail
      summary: "Verify email address."
      tags:
        - User Account
      description: "Verify code sent via email"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailVerify"
      responses:
        "200":
          description: "Success"
        "400":
          description: |
            ## Error occurred.
            ### Possible codes:
            * `Required`
            * `Invalid`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
          headers:
            Set-Cookie:
              schema:
                $ref: '#/components/schemas/LoginCookies'
        "409":
          description: "Conflict. User has already verified email address."

  /v1/auth/registration/confirmation-email-resend:
    post:
      operationId: resendConfirmationEmail
      summary: "Resend confirmation email."
      tags:
        - User Account
      description: "Resend email with regenerated code"
      responses:
        "200":
          description: "Success"
        "409":
          description: "Conflict. User has already verified email address."

  /v1/auth/login:
    post:
      security: []
      operationId: login
      summary: "Login."
      tags:
        - User Account
      description: "Check the credentials and set session cookie"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Authentication'
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
          headers:
            Set-Cookie:
              schema:
                $ref: '#/components/schemas/LoginCookies'
        "400":
          description : |
            ## Error occured.
            ### Possible codes:
            * `Required`
            * `Invalid`
        "403":
          description: "Access Denied"

  /v1/auth/logout:
    post:
      operationId: logout
      summary: "Logout."
      tags:
        - User Account
      description: "Logs out user by removing session cookie from client"
      responses:
        "200":
          description: "Success"
          headers:
            Set-Cookie:
              schema:
                type: string
                example: sessionid=; Path=/; HttpOnly
        "403":
          description: "Access Denied"

  /v1/auth/password/change:
    post:
      operationId: changePassword
      summary: "Change the password"
      tags:
        - User Account
      description: "Change the password"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePassword"
      responses:
        "200":
          description: "Success"
        "400":
          description: |
            ## Error occured.
            ### Possible codes:
            * `Required`
            * `Invalid`

            ### Additional error codes:
            * `WeakPassword` - password is too weak and can't be accepted
            * `WrongPassword` - password doesn't match with the original password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
        "403":
          description: "Access Denied"
        "409":
          description: "Conflict. User isn't verified yet."

  /v1/auth/password/reset:
    post:
      security: []
      operationId: requestPasswordReset
      summary: "Request password resetting."
      tags:
        - User Account
      description: "Reset the password"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: '#/components/schemas/userEmail'
              required:
                - email
      responses:
        "200":
          description: "Success"

  /v1/auth/password/reset/activate:
    post:
      security: []
      operationId: activatePasswordReset
      summary: "Activate password resetting process."
      tags:
        - User Account
      description: "Activates password resetting routine"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  $ref: "#/components/schemas/PasswordResetKey"
              required:
                - key
      responses:
        "200":
          description: "Success"
        "400":
          description: |
            ## Error occured.
            ### Possible codes:
              * `Invalid`
              * `Required`


  /v1/auth/password/reset/complete:
    post:
      security: []
      operationId: resetPassword
      summary: "Reset the password."
      tags:
        - User Account
      description: "Reset the password"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  $ref: "#/components/schemas/PasswordResetKey"
                password:
                  $ref: '#/components/schemas/userPassword'
              required:
                - key
                - password
      responses:
        "200":
          description: "Success"
        "400":
          description: |
            ## Error occurred.
            ### Possible codes:
              * `Invalid`
              * `Required`
              * `TooLong`

            ### Additional error codes:
            * `WeakPassword` - password is too weak and can't be accepted

  /v1/user/profile:
    get:
      operationId: getProfile
      summary: "Retrieve profile info for current user."
      tags:
        - User Account
      description: "Returns profile info for current user"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        "403":
          description: "Access Denied"

  /v1/user/profile/language:
    post:
      operationId: setLanguage
      summary: "Set user language"
      tags:
        - User Account
      description: "Set main language for current user"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                language:
                  $ref: '#/components/schemas/Language'
              required:
                - language
      responses:
        "200":
          description: "Success"

  /v1/user/limits:
    get:
      operationId: getLimits
      summary: "Retrieve API limits for user"
      tags:
        - User Account
      description: "Returns API limits for current user"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  resend_verification_email:
                    allOf:
                      - $ref: '#/components/schemas/Limit'
                      - nullable: true
                  resend_verification_sms:
                    allOf:
                      - $ref: '#/components/schemas/Limit'
                      - nullable: true
                  resend_verification_call:
                    allOf:
                      - $ref: '#/components/schemas/Limit'
                      - nullable: true
                  upload_kyc_document:
                    allOf:
                      - $ref: '#/components/schemas/Limit'
                      - nullable: true

  /v1/kyc/document:
    post:
      operationId: uploadDocument
      summary: Uploads a file.
      tags:
        - KYC
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DocumentUpload'
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentUUID"
        "400":
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
        "403":
          description: "Access Denied"
        "409":
          description: "Conflict"

  /v1/kyc/phone:
    post:
      operationId: submitPhone
      summary: Submit phone number.
      tags:
        - KYC
      description: "Submit phone number"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Phone"
      responses:
        "200":
          description: "Success"
        "400":
          description: |
            ## Error occured.
            ### Possible codes:
            * `Required`
            * `Invalid`
            * `TooLong`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
        "403":
          description: "Access Denied"
        "409":
          description: "Conflict. User has already verified phone number."
        "429":
          description: "Too Many Requests"

  /v1/kyc/phone/resend-sms:
    post:
      operationId: resendPhoneVerificationSms
      summary: Re-send SMS with a PIN.
      tags:
        - KYC
      description: "Re-send SMS with a PIN"
      responses:
        "200":
          description: "Success"
        "403":
          description: "Access Denied"
        "409":
          description: "Conflict. User has already verified phone number or has no phone at all."
        "429":
          description: "Too Many Requests"

  /v1/kyc/phone/call-me:
    post:
      operationId: callPhoneVerification
      summary: Call me to verify number.
      tags:
        - KYC
      description: "Call me to verify number"
      responses:
        "200":
          description: "Success"
        "403":
          description: "Access Denied"
        "409":
          description: "Conflict. User has already verified phone number or has no phone at all."
        "429":
          description: "Too Many Requests"

  /v1/kyc/phone/verify:
    post:
      operationId: verifyPhoneNumber
      summary: Verify phone number.
      tags:
        - KYC
      description: "Verify phone number"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyPhoneNumber"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
        "400":
          description: |
            ## Error occured.
            ### Possible codes:
            * `Required`
            * `Invalid`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
        "403":
          description: "Access Denied"
        "409":
          description: "Conflict. User has already verified phone number or has no phone at all."
        "429":
          description: "Too Many Requests"

  /v1/kyc/phone/verify/{verificationId}:
    get:
      operationId: getPhoneVerificationStatus
      summary: Get status of phone number verification
      tags:
        - KYC
      parameters:
        - name: verificationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [pending, failed, success]
        "404":
          description: "Not found"

  /v1/kyc/individual:
    post:
      operationId: submitKYCIndividual
      summary: Submit Personal KYC data.
      tags:
        - KYC
      description: "Submit Personal KYC data"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KycIndividual"
      responses:
        "200":
          description: "Success"
        "400":
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
        "403":
          description: "Access Denied"
        "409":
          description: "Conflict"

  /v1/kyc/individual/validate:
    post:
      operationId: validateKYCIndividual
      summary: Validate Personal KYC data.
      tags:
        - KYC
      description: |
        Validate data before commit.
        Only the passed keys will be validated.
        It means that data with missing values should be
        passed anyway with empty value
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/KycIndividualStep0"
                - $ref: "#/components/schemas/KycIndividualStep1"
                - $ref: "#/components/schemas/KycIndividualStep2"
                - $ref: "#/components/schemas/KycIndividualStep3"
      responses:
        "200":
          description: "Success"
        "400":
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
        "403":
          description: "Access Denied"

  /v1/kyc/organization:
    post:
      operationId: submitKYCOrganization
      summary: Submit Organization KYC data.
      tags:
        - KYC
      description: "Submit Organization KYC data"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KycOrganization"
      responses:
        "200":
          description: "Success"
        "400":
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
        "403":
          description: "Access Denied"
        "409":
          description: "Conflict"

  /v1/kyc/organization/validate:
    post:
      operationId: validateKYCOrganization
      summary: Validate Organization KYC data.
      tags:
        - KYC
      description: |
        Validate data before commit.
        Only the passed keys will be validated.
        It means that data with missing values should be
        passed anyway with empty value
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/KycOrganizationStep0"
                - $ref: "#/components/schemas/KycOrganizationStep1"
                - $ref: "#/components/schemas/KycOrganizationStep2"
                - $ref: "#/components/schemas/KycOrganizationStep3"
                - $ref: "#/components/schemas/KycOrganizationStep4"
                - $ref: "#/components/schemas/KycOrganizationStep5"
      responses:
        "200":
          description: "Success"
        "400":
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
        "403":
          description: "Access Denied"

components:
  securitySchemes:
    cookieAuthentication:
      type: apiKey
      in: cookie
      name: sessionid
    CSRFProtection:
      type: apiKey
      in: header
      name: X-CSRFToken

  schemas:
    userEmail:
      type: string
      description: "Email address. Should be unique."
      maxLength: 320
      format: email
    userPassword:
      type: string
      description: "Password"
      maxLength: 100
      format: password
    userName:
      type: string
      description: "Non-unique nickname"
      maxLength: 128
    TermsAndPolicy:
      type: object
      required:
        - isAgreedTerms
        - isAgreedPrivacyPolicy
      properties:
        isAgreedTerms:
          type: boolean
          description: "Agreement with Jibrel's Terms and Conditions"
        isAgreedPrivacyPolicy:
          type: boolean
          description: "Agreement with Jibrel's Privacy Policy"
    PhoneNumber:
      description: "E.164 formatted phone number"
      type: string
      pattern: '^\+[1-9]\d{1,14}$'

    LoginCookies:
      type: string
      example: sessionid=27w6easdfcvq1psccd54jelu3witsecr; Path=/; HttpOnly

    Country:
      type: string
      maxLength: 2
      minLength: 2
      pattern: "^[a-z]{2}$"
      example: "ae"
    Language:
      type: string
      maxLength: 2
      minLength: 2
      pattern: "^[a-z]{2}$"
      example: "en"


    Registration:
      allOf:
        - type: object
          required:
            - email
            - password
            - userName
          properties:
            email:
              $ref: '#/components/schemas/userEmail'
            password:
              $ref: '#/components/schemas/userPassword'
            userName:
              $ref: '#/components/schemas/userName'
            language:
              $ref: '#/components/schemas/Language'
        - $ref: '#/components/schemas/TermsAndPolicy'

    Profile:
      type: object
      properties:
        data:
          allOf:
            - type: object
              required:
                - uuid
                - userEmail
                - isEmailConfirmed
              properties:
                uuid:
                  type: string
                  description: "User UUID"
                  format: uuid
                userEmail:
                  $ref: '#/components/schemas/userEmail'
                userName:
                  $ref: '#/components/schemas/userName'
                isEmailConfirmed:
                  type: boolean
                userPhone:
                  type: string
                  maxLength: 4
                  nullable: true
                isPhoneConfirmed:
                  type: boolean
                language:
                  $ref: '#/components/schemas/Language'
            - $ref: '#/components/schemas/TermsAndPolicy'
            - type: object
              properties:
                kycStatus:
                  type: string
                  enum: [unverified, verified, advanced]
                  description: >
                    KYC statuses:
                     * `unverified` - Newly created account
                     * `verified` - Basic level
                     * `advanced` - Advanced level
              required:
                - kycStatus

    EmailVerify:
      type: object
      properties:
        key:
          type: string
          format: uuid
      required:
        - key

    PasswordResetKey:
      type: string
      format: uuid

    Authentication:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/userEmail'
        password:
          $ref: '#/components/schemas/userPassword'
      required:
        - email
        - password

    ChangePassword:
      type: object
      properties:
        oldPassword:
          $ref: '#/components/schemas/userPassword'
        newPassword:
          $ref: '#/components/schemas/userPassword'
      required:
        - oldPassword
        - newPassword

    Error:
      type: object
      properties:
        code:
          type: string
          example: "max_length"
        message:
          type: string
          example: "Ensure this field has no more than 100 characters."

    Errors:
      type: object
      properties:
        errors:
          type: object
          description: "Errors"
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/Error'

    KYCString:
      type: string
      maxLength: 30
      minLength: 1
      pattern: '([^\W\d]|[\s-])+'

    KycIndividual:
      type: object
      required:
        - firstName
        - lastName
        - birthDate
        - nationality
        - streetAddress
        - city
        - country
        - passportNumber
        - passportExpirationDate
        - passportDocument
        - proofOfAddressDocument
        - amlAgreed
        - uboConfirmed
      properties:
        # Personal and Contact Information
        firstName:
          allOf:
            - description: "First Name"
            - $ref: '#/components/schemas/KYCString'
          example: "John"
        middleName:
          allOf:
            - description: "Middle Name"
            - $ref: '#/components/schemas/KYCString'
          example: "Jr"
        lastName:
          allOf:
            - description: "Last Name"
            - $ref: '#/components/schemas/KYCString'
          example: "Doe"
        alias:
          allOf:
            - description: "Alias"
            - $ref: '#/components/schemas/KYCString'
          example: "Ivan"
        birthDate:
          description: "Date of Birth"
          type: string
          format: date
          example: "1990-01-29"
        nationality:
          allOf:
            - description: "Nationality"
            - $ref: '#/components/schemas/Country'
          example: "ru"
        # Current Residential Address
        streetAddress:
          description: "Street Address"
          type: string
          example: "Pushkina street, 1"
        apartment:
          description: "Apartment, Unit or Suite"
          type: string
          example: "43"
        city:
          description: "City"
          type: string
          example: "London"
        postCode:
          description: "Post Code"
          type: string
          example: "400033"
        country:
          allOf:
            - description: "Country"
            - $ref: '#/components/schemas/Country'
          example: "gb"
        # Income Information
        occupation:
          description: "Profession/Occupation"
          type: string
          enum:
            - accounting
            - admin_clerical_automotive
            - banking
            - biotech
            - broadcast_journalism
            - business_development
            - construction
            - consultant
            - customer_service
            - design
            - distribution_shipping
            - education_teaching
            - engineering
            - entry_level_new_grad
            - executive
            - facilities
            - finance
            - franchise
            - general_business
            - general_labor
            - government
            - grocery
            - health_care
            - hotel_hospitality
            - human_resources
            - information_technology
            - installation_maint_repair
            - insurance
            - inventory
            - legal
            - legal_admin
            - management
            - manufacturing
            - marketing
            - media_journalism_newspaper
            - nonprofit_social_services
            - nurse
            - pharmaceutical
            - professional_services
            - purchasing_procurement
            - qa_quality_control
            - real_estate
            - research
            - restaurant_food_service
            - retail
            - sales
            - science
            - skilled_labor_trades
            - strategy_planning
            - supply_chain
            - telecommunications
            - training
            - transportation
            - warehouse
          example: "design"
        occupationOther:
          description: "Other Profession/Occupation"
          type: string
          example: "Not employed"
        incomeSource:
          description: "Primary Source of Income"
          type: string
          enum:
            - primary_occupation
            - secondary_business_activities
            - sale_assets
            - inheritance
          example: "inheritance"
        incomeSourceOther:
          description: "Other Primary Source of Income"
          type: string
          example: "other"
        # Upload Documentation
        passportNumber:
          description: "Passport number"
          type: string
          example: "1214 896521"
        passportExpirationDate:
          description: "Passport exiration date"
          type: string
          format: date
          example: "2021-12-16"
        passportDocument:
          description: "Passport"
          type: string
          format: uuid
          example: "6a0413da-4f62-48fa-87e7-e3727a82c9c3"
        proofOfAddressDocument:
          description: "Proof of Address (Utility Bill, Bank  Statements,)"
          type: string
          format: uuid
          example: "5ec7deda-5c3f-4a1f-8d1e-9a552538f01b"
        amlAgreed:
          type: boolean
          example: true
        uboConfirmed:
          type: boolean
          example: true

    KycIndividualStep0:
      type: object
      required:
        - step
        - firstName
        - lastName
        - birthDate
        - nationality
      properties:
        step:
          description: "Current step"
          type: integer
          enum:
           - 0
        firstName:
          $ref: '#/components/schemas/KycIndividual/properties/firstName'
        lastName:
          $ref: '#/components/schemas/KycIndividual/properties/lastName'
        middleName:
          $ref: '#/components/schemas/KycIndividual/properties/middleName'
        alias:
          $ref: '#/components/schemas/KycIndividual/properties/alias'
        birthDate:
          $ref: '#/components/schemas/KycIndividual/properties/birthDate'
        nationality:
          $ref: '#/components/schemas/KycIndividual/properties/nationality'

    KycIndividualStep1:
      type: object
      required:
        - step
        - streetAddress
        - city
        - country
      properties:
        step:
          description: "Current step"
          type: integer
          enum:
           - 1
        streetAddress:
          $ref: '#/components/schemas/KycIndividual/properties/streetAddress'
        apartment:
          $ref: '#/components/schemas/KycIndividual/properties/apartment'
        city:
          $ref: '#/components/schemas/KycIndividual/properties/city'
        postCode:
          $ref: '#/components/schemas/KycIndividual/properties/postCode'
        country:
          $ref: '#/components/schemas/KycIndividual/properties/country'

    KycIndividualStep2:
      type: object
      required:
        - step
      properties:
        step:
          description: "Current step"
          type: integer
          enum:
           - 2
        occupation:
          $ref: '#/components/schemas/KycIndividual/properties/occupation'
        occupationOther:
          $ref: '#/components/schemas/KycIndividual/properties/occupationOther'
        incomeSource:
          $ref: '#/components/schemas/KycIndividual/properties/incomeSource'
        incomeSourceOther:
          $ref: '#/components/schemas/KycIndividual/properties/incomeSourceOther'

    KycIndividualStep3:
      type: object
      required:
        - step
        - passportNumber
        - passportExpirationDate
        - passportDocument
        - proofOfAddressDocument
      properties:
        step:
          description: "Current step"
          type: integer
          enum:
           - 3
        passportNumber:
          $ref: '#/components/schemas/KycIndividual/properties/passportNumber'
        passportExpirationDate:
          $ref: '#/components/schemas/KycIndividual/properties/passportExpirationDate'
        passportDocument:
          $ref: '#/components/schemas/KycIndividual/properties/passportDocument'
        proofOfAddressDocument:
          $ref: '#/components/schemas/KycIndividual/properties/proofOfAddressDocument'


    CompanyAddressInfo:
      type: object
      required:
        - streetAddress
        - city
        - country
      properties:
        streetAddress:
          description: "Street Address : Free Text"
          type: string
        apartment:
          description: "Apartment, Unit or Suite (Optional) : Free text"
          type: string
        city:
          description: "City : Free Text"
          type: string
        postCode:
          description: "Post Code (Optional): Free text"
          type: string
        country:
          allOf:
            - description: "Country : Dropdown"
            - $ref: '#/components/schemas/Country'

    Beneficiary:
      type: object
      required:
        - fullName
        - birthDate
        - nationality
        - email
        - phoneNumber
        - streetAddress
        - city
        - country
      properties:
        fullName:
          description: "Full Name : Free Text"
          type: string
          maxLength: 320
          minLength: 1
        birthDate:
          description: "Date of Birth : Birthday"
          type: string
          format: date
        nationality:
          description: "Nationality : Dropdown"
          $ref: '#/components/schemas/Country'
        email:
          description: "Email : Valid Email "
          type: string
          format: email
        phoneNumber:
          description: "Primary phone number"
          $ref: '#/components/schemas/Phone'
        streetAddress:
          description: "Street Address : Free Text"
          type: string
        apartment:
          description: "Apartment, Unit or Suite (Optional) : Free text"
          type: string
        city:
          description: "City : Free Text"
          type: string
        postCode:
          description: "Post Code (Optional): Free text"
          type: string
        country:
          description: "Country : Dropdown"
          $ref: '#/components/schemas/Country'

    KycOrganization:
      type: object
      required:
        - firstName
        - lastName
        - birthDate
        - nationality
        - phoneNumber
        - email
        - streetAddress
        - city
        - country
        - passportNumber
        - passportExpirationDate
        - passportDocument
        - proofOfAddressDocument
        - companyName
        - tradingName
        - placeOfIncorporation
        - dateOfIncorporation
        - commercialRegister
        - shareholderRegister
        - articlesOfIncorporation
        - companyAddressRegistered
        - beneficiaries
        - directors
      properties:
        firstName:
          description: "First Name : Free Text"
          type: string
          maxLength: 320
          minLength: 1
        middleName:
          description: "Middle Name (Optional) : Free Text"
          type: string
          maxLength: 320
          minLength: 1
        lastName:
          description: "Last Name : Free Text"
          type: string
          maxLength: 320
          minLength: 1
        birthDate:
          description: "Date of Birth : Birthday"
          type: string
          format: date
        nationality:
          allOf:
            - description: "Nationality : Dropdown"
            - $ref: '#/components/schemas/Country'
        email:
          description: "Email : Valid Email "
          type: string
          format: email
        # Current Residential Address
        streetAddress:
          description: "Street Address : Free Text"
          type: string
        apartment:
          description: "Apartment, Unit or Suite (Optional) : Free text"
          type: string
        city:
          description: "City : Free Text"
          type: string
        postCode:
          description: "Post Code (Optional): Free text"
          type: string
        country:
          allOf:
            - description: "Country : Dropdown"
            - $ref: '#/components/schemas/Country'
        phoneNumber:
          description: "Primary phone number"
          $ref: '#/components/schemas/Phone'
        passportNumber:
          description: "Passport Number"
          type: string
        passportExpirationDate:
          description: "Passport Expiration Date"
          type: string
          format: date
        passportDocument:
          description: "Passport"
          type: string
          format: uuid
        proofOfAddressDocument:
          description: "Proof of Address (Utility Bill, Bank  Statements,)"
          type: string
          format: uuid
        companyName:
          description: "Company Name: Free Text"
          type: string
        tradingName:
          description: "Trading Name: Free Text"
          type: string
        dateOfIncorporation:
          description: "Date of Incorporation: Date"
          type: string
          format: date
        placeOfIncorporation:
          description: "Place of Incorporation: Free Text"
          type: string
        commercialRegister:
          description: "Commercial Register Document ID"
          type: string
          format: uuid
        shareholderRegister:
          description: "Shareholder Register Document ID"
          type: string
          format: uuid
        articlesOfIncorporation:
          description: "Articles Of Incorporation Document ID"
          type: string
          format: uuid
        companyAddressRegistered:
          $ref: '#/components/schemas/CompanyAddressInfo'
        companyAddressPrincipal:
          $ref: '#/components/schemas/CompanyAddressInfo'
        beneficiaries:
          type: array
          items:
            $ref: '#/components/schemas/Beneficiary'
        directors:
          type: array
          items:
            type: string


    KycOrganizationStep0:
      type: object
      required:
        - step
        - companyName
        - tradingName
      properties:
        step:
          description: "Current step"
          type: integer
          enum:
           - 0
        companyName:
          $ref: '#/components/schemas/KycOrganization/properties/companyName'
        tradingName:
          $ref: '#/components/schemas/KycOrganization/properties/tradingName'
        dateOfIncorporation:
          $ref: '#/components/schemas/KycOrganization/properties/dateOfIncorporation'
        placeOfIncorporation:
          $ref: '#/components/schemas/KycOrganization/properties/placeOfIncorporation'

    KycOrganizationStep1:
      type: object
      required:
        - step
        - companyAddressRegistered
      properties:
        step:
          description: "Current step"
          type: integer
          enum:
           - 1
        companyAddressRegistered:
          $ref: '#/components/schemas/KycOrganization/properties/companyAddressRegistered'
        companyAddressPrincipal:
          $ref: '#/components/schemas/KycOrganization/properties/companyAddressPrincipal'

    KycOrganizationStep2:
      type: object
      required:
        - step
        - firstName
        - lastName
        - birthDate
        - nationality
        - phoneNumber
        - email
        - streetAddress
        - city
        - country
        - passportNumber
        - passportExpirationDate
      properties:
        step:
          description: "Current step"
          type: integer
          enum:
           - 2
        firstName:
          $ref: '#/components/schemas/KycOrganization/properties/firstName'
        lastName:
          $ref: '#/components/schemas/KycOrganization/properties/lastName'
        middleName:
          $ref: '#/components/schemas/KycOrganization/properties/middleName'
        birthDate:
          $ref: '#/components/schemas/KycOrganization/properties/birthDate'
        nationality:
          $ref: '#/components/schemas/KycOrganization/properties/nationality'
        phoneNumber:
          $ref: '#/components/schemas/KycOrganization/properties/phoneNumber'
        email:
          $ref: '#/components/schemas/KycOrganization/properties/email'
        streetAddress:
          $ref: '#/components/schemas/KycOrganization/properties/streetAddress'
        apartment:
          $ref: '#/components/schemas/KycOrganization/properties/apartment'
        city:
          $ref: '#/components/schemas/KycOrganization/properties/city'
        postCode:
          $ref: '#/components/schemas/KycOrganization/properties/postCode'
        country:
          $ref: '#/components/schemas/KycOrganization/properties/country'
        passportNumber:
          $ref: '#/components/schemas/KycOrganization/properties/passportNumber'
        passportExpirationDate:
          $ref: '#/components/schemas/KycOrganization/properties/passportExpirationDate'

    KycOrganizationStep3:
      type: object
      required:
        - step
        - beneficiaries
      properties:
        step:
          description: "Current step"
          type: integer
          enum:
           - 3
        beneficiaries:
          $ref: '#/components/schemas/KycOrganization/properties/beneficiaries'

    KycOrganizationStep4:
      type: object
      required:
        - step
        - directors
      properties:
        step:
          description: "Current step"
          type: integer
          enum:
           - 4
        directors:
          $ref: '#/components/schemas/KycOrganization/properties/directors'

    KycOrganizationStep5:
      type: object
      required:
        - step
        - passportDocument
        - proofOfAddressDocument
        - commercialRegister
        - shareholderRegister
        - articlesOfIncorporation
      properties:
        step:
          description: "Current step"
          type: integer
          enum:
           - 5
        passportDocument:
          $ref: '#/components/schemas/KycOrganization/properties/passportDocument'
        proofOfAddressDocument:
          $ref: '#/components/schemas/KycOrganization/properties/proofOfAddressDocument'
        commercialRegister:
          $ref: '#/components/schemas/KycOrganization/properties/commercialRegister'
        shareholderRegister:
          $ref: '#/components/schemas/KycOrganization/properties/shareholderRegister'
        articlesOfIncorporation:
          $ref: '#/components/schemas/KycOrganization/properties/articlesOfIncorporation'

    DocumentUpload:
      type: object
      properties:
        file:
          type: string
          format: binary
      required:
        - file

    DocumentUUID:
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              type: string
              description: "Document UUID"
              example: "353235bd-d43b-429f-84d5-64f6d3f4a7df"

    Phone:
      type: object
      properties:
        number:
          $ref: '#/components/schemas/PhoneNumber'
      required:
        - number

    VerifyPhoneNumber:
      type: object
      properties:
        pin:
          type: string
          description: "PIN"
      required:
        - pin

    Limit:
      type: object
      properties:
        leftSeconds:
          type: integer
          description: "Seconds left to next request"
        temproraryUnavailable:
          type: boolean
          description: "Tells if some limits were broken and user has to wait for a long time to the next request"


  examples:
    validRegistration:
      summary: Valid registration
      value:
        email: user@email.com
        password: VeryStromgPassPhrase
        userName: nickname
        language: "ar"
        isAgreedTerms: true
        isAgreedPrivacyPolicy: true
    disagreeTermsRegistration:
      summary: Invalid registration (terms isn't agreed)
      value:
        email: user@email.com
        password: VeryStromgPassPhrase
        userName: nickname
        language: "ar"
        isAgreedTerms: false
        isAgreedPrivacyPolicy: true
    weakPasswordRegistration:
      summary: Invalid registration (weak password)
      value:
        email: user@email.com
        password: password
        userName: nickname
        language: "ar"
        isAgreedTerms: true
        isAgreedPrivacyPolicy: true

security:
  - cookieAuthentication: []
  - CSRFProtection: []
