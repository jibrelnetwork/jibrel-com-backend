# Generated by Django 3.0.3 on 2020-02-11 10:50

from django.db import migrations, transaction


@transaction.atomic()
def fill_bank_account(apps, schema_editor):
    InvestmentApplication = apps.get_model('investment', 'InvestmentApplication')
    ia_qs = InvestmentApplication.objects.filter(bank_account__isnull=True)
    if not ia_qs.exists():
        return
    ColdBankAccount = apps.get_model('wire_transfer', 'ColdBankAccount')
    ia_pk_to_asset_id = ia_qs.values_list('pk', 'account__asset_id')
    asset_id_to_bank_acc = {}
    for ia_pk, asset_id in ia_pk_to_asset_id:
        if asset_id not in asset_id_to_bank_acc:
            asset_id_to_bank_acc[asset_id] = ColdBankAccount.objects.get(
                is_active=True,
                account__asset_id=asset_id
            )
        bank_account = asset_id_to_bank_acc[asset_id]

        InvestmentApplication.objects.filter(pk=ia_pk).update(bank_account_id=bank_account.pk)


class Migration(migrations.Migration):
    dependencies = [
        ('investment', '0016_auto_20200211_1050'),
    ]

    operations = [
        migrations.RunPython(code=fill_bank_account, reverse_code=migrations.RunPython.noop)
    ]
